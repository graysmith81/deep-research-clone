# -*- coding: utf-8 -*-
"""DeepResearchClone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-RGrRkuHPLYb4deqPk2Fyuc1q6LjKCtS

# Setup
"""

import os, json, itertools

from openai import OpenAI
from IPython.display import display, Markdown

from google.colab import userdata
openai_api_key = userdata.get('OPEN_AI')

# Setup OpenAI API key in the os
os.environ['OPENAI_API_KEY'] = openai_api_key

# Connect to the OpenAI API
client = OpenAI()

"""# Define the Inputs"""

# Define the model inputs
MODEL = "gpt-4.1"
MODEL_MINI = "gpt-4.1-mini"
TOOLS = [{ "type": "web_search" }]

# Developer message definition
developer_message = """
You are an expert deep researcher.
You must provide complete and in-depth research to the user.
"""

# Request the topic for research
topic = input("Please enter the topic that you'd like to research: ")
topic

"""# LLMs Asks Questions"""

prompt_to_clarify = f"""
Ask 5 numbered clarifying questions about the following topic: {topic}.
The goal of the questions is to understand the intended purpose of the research.
Reply only with the questions
"""

# Get the OpenAI API to ask 5 clarifying questions
clarify = client.responses.create(
    model=MODEL_MINI,
    input=prompt_to_clarify,
    instructions=developer_message
)

# Get the questions
questions = clarify.output[0].content[0].text.split("\n")
questions

# Ask each question to the user
answers = []
for question in questions:
  answer = input(f"{question}: ")
  answers.append(answer)

"""# Web Search

## Goals and Queries
"""

# Write the prompt_goals prompt
prompt_goals = f"""
Using the user's {answers} to the {questions}, write a goal sentence, and 5 web search queries for the research about {topic}.
Output: A json list of the goal sentence and the 5 web search queries that will reach it.
Format: {{\"goal\": \"...\", \"queries\": [\"q1\", ....]}}
"""

# Use the responses API
goal_and_queries = client.responses.create(
    model=MODEL,
    input=prompt_goals,
    previous_response_id=clarify.id,
    instructions=developer_message
)

# Formatting and loading as JSON
plan = json.loads(goal_and_queries.output[0].content[0].text)

print(plan["goal"])
print(plan["queries"])

# Store the goal and queries
goal = plan["goal"]
queries = plan["queries"]

"""## Web Search"""

# Print the first query
print(queries[0])

# Web search with the resposnes endpoint
web_search = client.responses.create(
    model=MODEL,
    input=f"search: {queries[0]}",
    previous_response_id=goal_and_queries.id,
    instructions=developer_message,
    tools=TOOLS
)

# Investigate the output

# Retrieve the ID
web_search.output[1].id

# Retrive the content
web_search.output[1].content[0].text

# Build a function for the web searches
def run_search(query):
  web_search = client.responses.create(
      model=MODEL,
      input=f"search: {query}",
      previous_response_id=goal_and_queries.id,
      instructions=developer_message,
      tools=TOOLS
  )

  return {
      "query": query,
      "resp_id": web_search.output[1].id,
      "research_output": web_search.output[1].content[0].text
      }

# Test the function
run_search(queries[0])

"""## Verification

Veryifying if we have enough information to reach the stated goal.
"""

# Create a function to evalute the outcome
def evaluate_responses(collected):
  review = client.responses.create(
      model=MODEL,
      input=[
          {"role": "developer", "content": f"Research goal: {goal}"},
          {"role": "assistant", "content": json.dumps(collected)},
          {"role": "user", "content": "Does this information fully satisfy the goal? Answer Yes or No only."}
          ],
      instructions=developer_message
  )
  return "yes" in review.output[0].content[0].text.lower()

# Verifying the information
collected = []
for _ in itertools.count():
  for query in queries:
    collected.append(run_search(query))
  if evaluate_responses(collected):
    break

  # if no: perform 5 more questions
  more_searches = client.responses.create(
      model=MODEL,
      input=[
          {"role": "assistant", "content": f"Current data: {json.dumps(collected)}"},
          {"role": "user", "content": f"This has not me the goal: {goal}. Write 5 more web searches to achieve the goal"}
      ],
      instructions=developer_message,
      previous_response_id=goal_and_queries.id
  )

  queries = json.loads(more_searches.output[0].content[0].text)

collected

"""# Write the Final Report"""

# Use the reponses endpoint to write the deep research report
report = client.responses.create(
    model=MODEL,
    input=[
        {"role": "developer", "content": (f"Write a complete and detailed report abouth the research goal: {goal}"
                                          "Cite sources inline using [n] and append a reference"
                                          "List mapping [n] to url")},
        {"role": "assistant", "content": json.dumps(collected)},
    ],
    instructions=developer_message
)

print("\n=== FINAL REPORT ===")
display(Markdown(report.output[0].content[0].text))